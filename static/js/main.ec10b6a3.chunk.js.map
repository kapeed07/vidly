{"version":3,"sources":["components/common/like.jsx","components/common/tableHeader.jsx","components/common/tableBody.jsx","components/moviesTable.jsx","services/fakeGenreService.js","services/fakeMovieService.js","components/movies.jsx","utils.js","App.js","serviceWorker.js","index.js"],"names":["Like","liked","toggleLike","onClick","theme","type","TableHeader","raiseSort","path","sortColumn","props","order","handleMovieSort","this","columns","map","column","key","label","Component","TableBody","renderCell","item","content","_","get","createKey","_id","data","MoviesTable","state","movie","color","numberInStock","handleMovieDelete","movies","genres","name","title","genre","dailyRentalRate","publishDate","Movies","pageSize","currentPage","selectedGenre","index","indexOf","setState","handleGenreSelect","handlePageChange","page","id","filter","g","allMovies","filteredMovies","items","pageNumber","startIndex","slice","take","value","paginate","orderBy","moviesCount","length","Fragment","size","bordered","dataSource","renderItem","Item","defaultCurrent","hideOnSinglePage","onChange","total","App","span","offset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ec10b6a3.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Icon\n} from 'antd'\n\nconst Like = ({liked, toggleLike}) => {\n  return (\n    <div>\n      <Icon\n        onClick={ toggleLike }\n        theme={ liked ? 'filled' : '' }\n        type=\"heart\">\n      </Icon>\n    </div>\n  );\n}\n \nexport default Like;","import React, { Component } from 'react';\n\nimport {\n  Icon\n} from \"antd\";\n\nclass TableHeader extends Component {\n  raiseSort = (path) => {\n    let sortColumn = {...this.props.sortColumn}\n    if(sortColumn.path === path) {\n      sortColumn.order = sortColumn.order === 'asc' ? 'desc' : 'asc';\n    } else {\n      sortColumn.path = path;\n      sortColumn.order = 'asc';\n    }\n    this.props.handleMovieSort(sortColumn)\n  }\n\n  render() {\n\n    const {\n      columns,\n      sortColumn\n    } = this.props;\n\n    const order = sortColumn.order === \"asc\" ? \"sort-ascending\" : \"sort-descending\";\n\n    return (\n      <thead>\n        <tr>\n          { columns.map(column => (\n            <th\n              key={ column.path || column.key }\n              onClick={ () => this.raiseSort(column.path) }>\n                { column.label }\n                <Icon type={ order } />\n            </th>\n          ))}\n        </tr>\n      </thead>\n    );\n  }\n}\n \nexport default TableHeader;","import React, { Component } from 'react';\nimport _ from \"loadsh\";\n\nclass TableBody extends Component {\n  renderCell = (item, column) => {\n    if(column.content) {\n      return column.content(item)\n    } else {\n      return _.get(item, column.path)\n    }\n  }\n\n  createKey = (item, column) => {\n    return item._id + (column.path || column.key)\n  }\n  \n  render() { \n\n    const {\n      data,\n      columns\n    } = this.props;\n    \n    return (\n      <tbody>\n        { data.map(item => <tr key={ item._id }>\n          {columns.map(column => <td key={ this.createKey(item, column) }>{ this.renderCell(item, column) }</td>)}\n          </tr>)}\n      </tbody>\n    );\n  }\n}\n \nexport default TableBody;","import React, { Component } from 'react';\n\nimport {\n  Button,\n  Tag\n} from 'antd';\n\nimport Like from \"./common/like\"\nimport TableHeader from \"./common/tableHeader\"\nimport TableBody from \"./common/tableBody\"\n\n\nclass MoviesTable extends Component {\n  state = {  }\n\n  render() {\n    \n    const columns = [\n      { path: \"title\", label: \"Title\" },\n      { path: \"genre.name\", label: \"Genre\" },\n      { path: \"numberInStock\", content: movie => (<Tag color=\"geekblue\">{ movie.numberInStock }</Tag>) },\n      { path: \"dailyRentalRate\", label: \"Rate \"},\n      { key: \"like\", content: movie => (<Like liked={ movie.liked } toggleLike={ () => this.props.toggleLike(movie) }></Like>) },\n      { key: \"delete\", content: movie => (<Button type=\"danger\" onClick={ () => this.props.handleMovieDelete(movie._id) }>Delete</Button>) }\n    ];\n    \n    const {\n      movies,\n      handleMovieSort,\n      sortColumn\n    } = this.props;\n    \n    return (\n      <table>\n        <TableHeader\n          sortColumn={ sortColumn }\n          handleMovieSort={ handleMovieSort }\n          columns={ columns }>\n        </TableHeader>\n\n        <TableBody\n          data={ movies }\n          columns={ columns }>\n        </TableBody>\n      </table>\n    );\n  }\n}\n \nexport default MoviesTable;","export const genres = [\n  { _id: \"5b21ca3eeb7f6fbccd471818\", name: \"Action\" },\n  { _id: \"5b21ca3eeb7f6fbccd471814\", name: \"Comedy\" },\n  { _id: \"5b21ca3eeb7f6fbccd471820\", name: \"Thriller\" }\n];\n\nexport function getGenres() {\n  return genres.filter(g => g);\n}\n","import * as genresAPI from \"./fakeGenreService\";\n\nconst movies = [\n  {\n    _id: \"5b21ca3eeb7f6fbccd471815\",\n    title: \"Terminator\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471818\", name: \"Action\" },\n    numberInStock: 6,\n    dailyRentalRate: 2.5,\n    publishDate: \"2018-01-03T19:04:28.809Z\",\n    liked: true\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471816\",\n    title: \"Die Hard\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471818\", name: \"Action\" },\n    numberInStock: 5,\n    dailyRentalRate: 2.5\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471817\",\n    title: \"Get Out\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471820\", name: \"Thriller\" },\n    numberInStock: 8,\n    dailyRentalRate: 3.5\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471819\",\n    title: \"Trip to Italy\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471814\", name: \"Comedy\" },\n    numberInStock: 7,\n    dailyRentalRate: 3.5\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd47181a\",\n    title: \"Airplane\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471814\", name: \"Comedy\" },\n    numberInStock: 7,\n    dailyRentalRate: 3.5\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd47181b\",\n    title: \"Wedding Crashers\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471814\", name: \"Comedy\" },\n    numberInStock: 7,\n    dailyRentalRate: 3.5\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd47181e\",\n    title: \"Gone Girl\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471820\", name: \"Thriller\" },\n    numberInStock: 7,\n    dailyRentalRate: 4.5\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd47181f\",\n    title: \"The Sixth Sense\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471820\", name: \"Thriller\" },\n    numberInStock: 4,\n    dailyRentalRate: 3.5\n  },\n  {\n    _id: \"5b21ca3eeb7f6fbccd471821\",\n    title: \"The Avengers\",\n    genre: { _id: \"5b21ca3eeb7f6fbccd471818\", name: \"Action\" },\n    numberInStock: 7,\n    dailyRentalRate: 3.5\n  }\n];\n\nexport function getMovies() {\n  return movies;\n}\n\nexport function getMovie(id) {\n  return movies.find(m => m._id === id);\n}\n\nexport function saveMovie(movie) {\n  let movieInDb = movies.find(m => m._id === movie._id) || {};\n  movieInDb.name = movie.name;\n  movieInDb.genre = genresAPI.genres.find(g => g._id === movie.genreId);\n  movieInDb.numberInStock = movie.numberInStock;\n  movieInDb.dailyRentalRate = movie.dailyRentalRate;\n\n  if (!movieInDb._id) {\n    movieInDb._id = Date.now();\n    movies.push(movieInDb);\n  }\n\n  return movieInDb;\n}\n\nexport function deleteMovie(id) {\n  let movieInDb = movies.find(m => m._id === id);\n  movies.splice(movies.indexOf(movieInDb), 1);\n  return movieInDb;\n}\n","import React, { Component } from 'react';\nimport _ from 'loadsh';\n\nimport {\n  Pagination,\n  List\n} from 'antd';\n\nimport MoviesTable from \"./moviesTable\"\nimport { paginate } from \"./../utils\"\nimport { getMovies } from \"../services/fakeMovieService\"\nimport { getGenres } from \"../services/fakeGenreService\"\n\nclass Movies extends Component {\n  state = { \n    movies: [],\n    genres: [],\n    pageSize: 3,\n    currentPage: 1,\n    sortColumn: { path: 'title', order: 'asc' },\n    selectedGenre: \"\"\n  }\n\n  componentDidMount() {\n    let genres = [{ _id: \"\", name: \"All Genres\" } , ...getGenres()]\n    this.setState({ movies: getMovies(), genres })\n  }\n  \n  toggleLike = (movie) => {\n    let movies = [...this.state.movies]\n    let index = movies.indexOf(movie);\n    movies[index].liked = !movies[index].liked;    \n    this.setState({ movies })\n  }\n\n  handleMovieSort = (sortColumn) => {\n    this.setState({ sortColumn });\n  }\n\n  handleGenreSelect = (genre) => {\n    const selectedGenre = genre;\n    this.setState({ selectedGenre, currentPage: 1 })\n  }\n\n  handlePageChange = (page) => {\n    this.setState({ currentPage: page })\n  }\n\n  handleMovieDelete = (id) => {\n    let movies = this.state.movies.filter(movie => movie._id !== id);\n    this.setState({ movies })\n  }\n\n  render() {\n    const {\n      genres,\n      pageSize,\n      sortColumn,\n      currentPage,\n      selectedGenre,\n      movies: allMovies\n    } = this.state;\n    \n    const filteredMovies = selectedGenre._id\n                            ? allMovies.filter(movie => movie.genre._id === selectedGenre._id)\n                            : allMovies;\n    \n    const sortedMovies = _.orderBy(filteredMovies, [sortColumn.path], [sortColumn.order]);\n    \n    const movies = paginate(sortedMovies, currentPage, pageSize);\n\n    let moviesCount = filteredMovies.length;\n    \n    if(moviesCount === 0)\n      return <p>There are no movies in the database.</p>\n\n    return (\n      <React.Fragment>\n      <p>Showing { moviesCount } movies in the database.</p>\n      <List\n        size=\"small\"\n        bordered\n        dataSource={genres}\n        renderItem={item => (\n          <List.Item onClick={ () => this.handleGenreSelect(item) }>{ item.name }</List.Item>\n        )}>\n      </List>\n      <MoviesTable\n        movies={ movies }\n        toggleLike={ this.toggleLike }\n        sortColumn={ sortColumn }\n        handleMovieSort={ this.handleMovieSort }\n        handleMovieDelete={ this.handleMovieDelete }>\n      </MoviesTable>\n      <Pagination\n        pageSize={ this.state.pageSize }\n        defaultCurrent={1}\n        hideOnSinglePage={ true }\n        onChange={ this.handlePageChange }\n        total={ filteredMovies.length }>\n      </Pagination>\n      </React.Fragment>\n    );\n  }\n}\n \nexport default Movies;","import _ from 'loadsh';\n\nexport function paginate (items, pageNumber, pageSize) {\n  const startIndex = (pageNumber - 1) * pageSize;\n  return _(items).slice(startIndex).take(pageSize).value();\n}","import React from 'react';\nimport { Row, Col } from 'antd';\nimport Movies from \"./components/movies\"\n\nfunction App() {\n  return (\n    <Row>\n      <Col span={12} offset={6}>\n        <Movies />\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}